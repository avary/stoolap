package test

import (
	"fmt"
	"strings"
	"testing"
	"time"

	"github.com/stoolap/stoolap/internal/storage"
	"github.com/stoolap/stoolap/internal/storage/expression"
	"github.com/stoolap/stoolap/internal/storage/mvcc"
)

// TestMultiColumnarIndexComprehensive performs comprehensive testing of the MultiColumnarIndex
// implementation, ensuring that all operations return correct results
func TestMultiColumnarIndexComprehensive(t *testing.T) {
	// Create a memory-only engine for testing
	config := &storage.Config{
		Path: "", // Memory-only
	}
	engine := mvcc.NewMVCCEngine(config)
	err := engine.Open()
	if err != nil {
		t.Fatalf("Failed to open engine: %v", err)
	}
	defer engine.Close()

	// Set up the schema for the test table
	schema := storage.Schema{
		TableName: "test_table",
		Columns: []storage.SchemaColumn{
			{ID: 0, Name: "id", Type: storage.INTEGER},
			{ID: 1, Name: "username", Type: storage.TEXT},
			{ID: 2, Name: "age", Type: storage.INTEGER},
			{ID: 3, Name: "country", Type: storage.TEXT},
			{ID: 4, Name: "created_at", Type: storage.TIMESTAMP},
			{ID: 5, Name: "is_active", Type: storage.BOOLEAN},
			{ID: 6, Name: "score", Type: storage.FLOAT},
		},
	}

	// Create the table
	_, err = engine.CreateTable(schema)
	if err != nil {
		t.Fatalf("Failed to create table: %v", err)
	}

	// Get the version store for this table
	vs, vsErr := engine.GetVersionStore("test_table")
	if vsErr != nil {
		t.Fatalf("Failed to get version store: %v", vsErr)
	}

	// Test data
	type UserRecord struct {
		ID        int64
		Username  string
		Age       int64
		Country   string
		CreatedAt time.Time
		IsActive  bool
		Score     float64
		Tags      []string
	}

	users := []UserRecord{
		{ID: 1, Username: "alice", Age: 30, Country: "USA", CreatedAt: parse("2023-01-01"), IsActive: true, Score: 85.5, Tags: []string{"admin", "user"}},
		{ID: 2, Username: "bob", Age: 25, Country: "UK", CreatedAt: parse("2023-01-15"), IsActive: true, Score: 72.0, Tags: []string{"user"}},
		{ID: 3, Username: "charlie", Age: 40, Country: "USA", CreatedAt: parse("2023-02-01"), IsActive: false, Score: 91.2, Tags: []string{"premium", "user"}},
		{ID: 4, Username: "dana", Age: 35, Country: "Canada", CreatedAt: parse("2023-02-15"), IsActive: true, Score: 68.7, Tags: []string{"user"}},
		{ID: 5, Username: "evan", Age: 20, Country: "UK", CreatedAt: parse("2023-03-01"), IsActive: true, Score: 77.8, Tags: []string{"trial", "user"}},
		{ID: 6, Username: "frank", Age: 45, Country: "USA", CreatedAt: parse("2023-03-15"), IsActive: false, Score: 55.3, Tags: nil},
		{ID: 7, Username: "grace", Age: 28, Country: "Canada", CreatedAt: parse("2023-04-01"), IsActive: true, Score: 82.1, Tags: []string{"premium", "user"}},
		{ID: 8, Username: "hannah", Age: 33, Country: "UK", CreatedAt: parse("2023-04-15"), IsActive: true, Score: 93.5, Tags: []string{"admin", "premium", "user"}},
		{ID: 9, Username: "ian", Age: 50, Country: "USA", CreatedAt: parse("2023-05-01"), IsActive: false, Score: 45.9, Tags: []string{"user"}},
		{ID: 10, Username: "julia", Age: 38, Country: "Canada", CreatedAt: parse("2023-05-15"), IsActive: true, Score: 79.4, Tags: []string{"premium", "user"}},
	}

	// Create the index based on row properties
	t.Run("MultiColumn_ID_Country_Age", func(t *testing.T) {
		// Create the index
		idx := mvcc.NewMultiColumnarIndex(
			"idx_id_country_age",
			"users",
			[]string{"id", "country", "age"},
			[]int{0, 1, 2},
			[]storage.DataType{storage.INTEGER, storage.TEXT, storage.INTEGER},
			vs,
			false,
		)

		// Add users to the index
		for i, user := range users {
			rowID := int64(i + 1)
			values := []storage.ColumnValue{
				storage.NewIntegerValue(user.ID),
				storage.NewStringValue(user.Country),
				storage.NewIntegerValue(user.Age),
			}
			err := idx.Add(values, rowID, 0)
			if err != nil {
				t.Fatalf("Failed to add user %d to index: %v", i+1, err)
			}
		}

		// Test exact match lookups
		t.Run("ExactMatch", func(t *testing.T) {
			rowIDs := idx.GetRowIDsEqual([]storage.ColumnValue{
				storage.NewIntegerValue(1),
				storage.NewStringValue("USA"),
				storage.NewIntegerValue(30),
			})
			assertRowIDs(t, rowIDs, []int64{1})

			// Test exact match with non-existent value
			rowIDs = idx.GetRowIDsEqual([]storage.ColumnValue{
				storage.NewIntegerValue(999),
				storage.NewStringValue("USA"),
				storage.NewIntegerValue(30),
			})
			assertRowIDs(t, rowIDs, []int64{})
		})

		// Test range queries on first column
		t.Run("FirstColumnRange", func(t *testing.T) {
			// ID between 3 and 7 inclusive
			rowIDs := idx.GetRowIDsInRange(
				[]storage.ColumnValue{storage.NewIntegerValue(3)},
				[]storage.ColumnValue{storage.NewIntegerValue(7)},
				true, true,
			)
			assertRowIDs(t, rowIDs, []int64{3, 4, 5, 6, 7})

			// ID > 8
			rowIDs = idx.GetRowIDsInRange(
				[]storage.ColumnValue{storage.NewIntegerValue(8)},
				nil,
				false, false,
			)
			assertRowIDs(t, rowIDs, []int64{9, 10})

			// ID <= 3
			rowIDs = idx.GetRowIDsInRange(
				nil,
				[]storage.ColumnValue{storage.NewIntegerValue(3)},
				false, true,
			)
			assertRowIDs(t, rowIDs, []int64{1, 2, 3})
		})

		// Test composite range queries
		t.Run("CompositeRange", func(t *testing.T) {
			// ID between 3 and 7, Country = "USA"
			rowIDs := idx.GetRowIDsInRange(
				[]storage.ColumnValue{
					storage.NewIntegerValue(3),
					storage.NewStringValue("USA"),
				},
				[]storage.ColumnValue{
					storage.NewIntegerValue(7),
					storage.NewStringValue("USA"),
				},
				true, true,
			)
			assertRowIDs(t, rowIDs, []int64{3, 6})

			// ID between 3 and 7, Country = "UK", Age <= 30
			rowIDs = idx.GetRowIDsInRange(
				[]storage.ColumnValue{
					storage.NewIntegerValue(3),
					storage.NewStringValue("UK"),
					nil,
				},
				[]storage.ColumnValue{
					storage.NewIntegerValue(7),
					storage.NewStringValue("UK"),
					storage.NewIntegerValue(30),
				},
				true, true,
			)
			assertRowIDs(t, rowIDs, []int64{5})
		})

		// Test simple expressions
		t.Run("SimpleExpressions", func(t *testing.T) {
			// ID = 5
			expr := &expression.SimpleExpression{
				Column:   "id",
				Operator: storage.EQ,
				Value:    int64(5),
			}
			rowIDs := idx.GetFilteredRowIDs(expr)
			assertRowIDs(t, rowIDs, []int64{5})

			// Country = "USA"
			expr = &expression.SimpleExpression{
				Column:   "country",
				Operator: storage.EQ,
				Value:    "USA",
			}
			rowIDs = idx.GetFilteredRowIDs(expr)
			assertRowIDs(t, rowIDs, []int64{1, 3, 6, 9})

			// Age > 40
			expr = &expression.SimpleExpression{
				Column:   "age",
				Operator: storage.GT,
				Value:    int64(40),
			}
			rowIDs = idx.GetFilteredRowIDs(expr)
			assertRowIDs(t, rowIDs, []int64{6, 9})
		})

		// Test complex expressions
		t.Run("ComplexExpressions", func(t *testing.T) {
			// Country = "USA" AND Age > 35
			expr1 := &expression.SimpleExpression{
				Column:   "country",
				Operator: storage.EQ,
				Value:    "USA",
			}
			expr2 := &expression.SimpleExpression{
				Column:   "age",
				Operator: storage.GT,
				Value:    int64(35),
			}
			andExpr := &expression.AndExpression{
				Expressions: []storage.Expression{expr1, expr2},
			}
			rowIDs := idx.GetFilteredRowIDs(andExpr)
			assertRowIDs(t, rowIDs, []int64{3, 6, 9})

			// Age between 25 and 35
			expr1 = &expression.SimpleExpression{
				Column:   "age",
				Operator: storage.GTE,
				Value:    int64(25),
			}
			expr2 = &expression.SimpleExpression{
				Column:   "age",
				Operator: storage.LTE,
				Value:    int64(35),
			}
			andExpr = &expression.AndExpression{
				Expressions: []storage.Expression{expr1, expr2},
			}
			rowIDs = idx.GetFilteredRowIDs(andExpr)
			assertRowIDs(t, rowIDs, []int64{1, 2, 4, 5, 7})
		})

		// Test Remove operation
		t.Run("Remove", func(t *testing.T) {
			// Remove user 5
			values := []storage.ColumnValue{
				storage.NewIntegerValue(5),
				storage.NewStringValue("UK"),
				storage.NewIntegerValue(20),
			}
			err := idx.Remove(values, 5, 0)
			if err != nil {
				t.Errorf("Failed to remove user 5: %v", err)
			}

			// Verify removal
			rowIDs := idx.GetRowIDsEqual(values)
			assertRowIDs(t, rowIDs, []int64{})

			// Expression that would have matched user 5
			expr := &expression.SimpleExpression{
				Column:   "age",
				Operator: storage.EQ,
				Value:    int64(20),
			}
			rowIDs = idx.GetFilteredRowIDs(expr)
			assertRowIDs(t, rowIDs, []int64{})
		})
	})

	// Test index with timestamp and nulls
	t.Run("MultiColumn_CreatedAt_IsActive_Username", func(t *testing.T) {
		// Create the index
		idx := mvcc.NewMultiColumnarIndex(
			"idx_created_active_username",
			"users",
			[]string{"created_at", "is_active", "username"},
			[]int{0, 1, 2},
			[]storage.DataType{storage.TIMESTAMP, storage.BOOLEAN, storage.TEXT},
			vs,
			false,
		)

		// Add users to the index
		for i, user := range users {
			rowID := int64(i + 1)
			values := []storage.ColumnValue{
				storage.NewTimestampValue(user.CreatedAt),
				storage.NewBooleanValue(user.IsActive),
				storage.NewStringValue(user.Username),
			}
			err := idx.Add(values, rowID, 0)
			if err != nil {
				t.Fatalf("Failed to add user %d to index: %v", i+1, err)
			}
		}

		// Test range queries on timestamp
		t.Run("TimestampRange", func(t *testing.T) {
			// Users created in Q1 2023 (Jan-Mar)
			rowIDs := idx.GetRowIDsInRange(
				[]storage.ColumnValue{storage.NewTimestampValue(parse("2023-01-01"))},
				[]storage.ColumnValue{storage.NewTimestampValue(parse("2023-03-31"))},
				true, true,
			)
			assertRowIDs(t, rowIDs, []int64{1, 2, 3, 4, 5, 6})

			// Users created after Feb 15
			rowIDs = idx.GetRowIDsInRange(
				[]storage.ColumnValue{storage.NewTimestampValue(parse("2023-02-15"))},
				nil,
				true, false,
			)
			assertRowIDs(t, rowIDs, []int64{4, 5, 6, 7, 8, 9, 10})
		})

		// Test composite queries with timestamp and boolean
		t.Run("TimestampBooleanComposite", func(t *testing.T) {
			// Active users created in Q1
			rowIDs := idx.GetRowIDsInRange(
				[]storage.ColumnValue{
					storage.NewTimestampValue(parse("2023-01-01")),
					storage.NewBooleanValue(true),
				},
				[]storage.ColumnValue{
					storage.NewTimestampValue(parse("2023-03-31")),
					storage.NewBooleanValue(true),
				},
				true, true,
			)
			assertRowIDs(t, rowIDs, []int64{1, 2, 4, 5})

			// Inactive users created after Feb
			rowIDs = idx.GetRowIDsInRange(
				[]storage.ColumnValue{
					storage.NewTimestampValue(parse("2023-02-01")),
					storage.NewBooleanValue(false),
				},
				nil,
				true, false,
			)
			assertRowIDs(t, rowIDs, []int64{3, 6, 9})
		})

		// Test filtering with expressions on different columns
		t.Run("MultiColumnFiltering", func(t *testing.T) {
			// Active users with username containing 'a'
			expr1 := &expression.SimpleExpression{
				Column:   "is_active",
				Operator: storage.EQ,
				Value:    true,
			}

			// We need a custom expression for string contains
			// In a real database this might be a LIKE expression
			// For this test, we'll manually filter
			activeUsers := idx.GetFilteredRowIDs(expr1)

			// Now filter by username
			var result []int64
			for _, rowID := range activeUsers {
				username := users[rowID-1].Username
				if containsChar(username, 'a') {
					result = append(result, rowID)
				}
			}

			// Expected: alice, dana, grace, hannah, julia
			assertContainsRowIDs(t, result, []int64{1, 4, 7, 8, 10})

			// Users created in 2023-01 who are active
			expr1 = &expression.SimpleExpression{
				Column:   "created_at",
				Operator: storage.GTE,
				Value:    parse("2023-01-01"),
			}
			expr2 := &expression.SimpleExpression{
				Column:   "created_at",
				Operator: storage.LT,
				Value:    parse("2023-02-01"),
			}
			expr3 := &expression.SimpleExpression{
				Column:   "is_active",
				Operator: storage.EQ,
				Value:    true,
			}

			// We need to do this in steps since our MultiColumnarIndex doesn't support 3-way AND
			rangeExpr := &expression.AndExpression{
				Expressions: []storage.Expression{expr1, expr2},
			}

			// Get users in January
			januaryUsers := idx.GetFilteredRowIDs(rangeExpr)

			// Get active users
			activeUsers = idx.GetFilteredRowIDs(expr3)

			// Intersect the results
			intersection := intersect(januaryUsers, activeUsers)

			// Expected: active users created in January (alice, bob)
			assertRowIDs(t, intersection, []int64{1, 2})
		})

		// Test NULL values
		t.Run("NullValues", func(t *testing.T) {
			// Add a user with NULL values
			values := []storage.ColumnValue{
				storage.NewTimestampValue(parse("2023-06-01")),
				nil, // NULL is_active
				storage.NewStringValue("nulluser"),
			}
			err := idx.Add(values, 11, 0)
			if err != nil {
				t.Fatalf("Failed to add user with NULL: %v", err)
			}

			// Test for NULL is_active
			expr := &expression.SimpleExpression{
				Column:   "is_active",
				Operator: storage.ISNULL,
				Value:    nil,
			}
			rowIDs := idx.GetFilteredRowIDs(expr)
			assertRowIDs(t, rowIDs, []int64{11})

			// Add another user with NULL username
			values = []storage.ColumnValue{
				storage.NewTimestampValue(parse("2023-06-15")),
				storage.NewBooleanValue(true),
				nil, // NULL username
			}
			err = idx.Add(values, 12, 0)
			if err != nil {
				t.Fatalf("Failed to add user with NULL: %v", err)
			}

			// Test for any NULL column
			expr = &expression.SimpleExpression{
				Column:   "username",
				Operator: storage.ISNULL,
				Value:    nil,
			}
			rowIDs = idx.GetFilteredRowIDs(expr)
			assertRowIDs(t, rowIDs, []int64{12})
		})
	})

	// Test score range index with both INT and FLOAT data
	t.Run("MultiColumn_Score_Age", func(t *testing.T) {
		// Create the index
		idx := mvcc.NewMultiColumnarIndex(
			"idx_score_age",
			"users",
			[]string{"score", "age"},
			[]int{0, 1},
			[]storage.DataType{storage.FLOAT, storage.INTEGER},
			vs,
			false,
		)

		// Add users to the index
		for i, user := range users {
			rowID := int64(i + 1)
			values := []storage.ColumnValue{
				storage.NewFloatValue(user.Score),
				storage.NewIntegerValue(user.Age),
			}
			err := idx.Add(values, rowID, 0)
			if err != nil {
				t.Fatalf("Failed to add user %d to index: %v", i+1, err)
			}
		}

		// Test range queries on floating point score
		t.Run("FloatRangeQueries", func(t *testing.T) {
			// High scorers (>80)
			rowIDs := idx.GetRowIDsInRange(
				[]storage.ColumnValue{storage.NewFloatValue(80.0)},
				nil,
				true, false,
			)
			// Expected: alice, charlie, grace, hannah, julia
			assertRowIDs(t, rowIDs, []int64{1, 3, 7, 8, 10})

			// Low scorers (<70)
			rowIDs = idx.GetRowIDsInRange(
				nil,
				[]storage.ColumnValue{storage.NewFloatValue(70.0)},
				false, false,
			)
			// Expected: dana, frank, ian
			assertRowIDs(t, rowIDs, []int64{4, 6, 9})

			// Medium scorers (70-80)
			rowIDs = idx.GetRowIDsInRange(
				[]storage.ColumnValue{storage.NewFloatValue(70.0)},
				[]storage.ColumnValue{storage.NewFloatValue(80.0)},
				true, true,
			)
			// Expected: bob, evan
			assertRowIDs(t, rowIDs, []int64{2, 5})
		})

		// Test composite conditions
		t.Run("CompositeScoreAge", func(t *testing.T) {
			// High score (>80) and young (<30)
			rowIDs := idx.GetRowIDsInRange(
				[]storage.ColumnValue{
					storage.NewFloatValue(80.0),
					nil,
				},
				[]storage.ColumnValue{
					nil,
					storage.NewIntegerValue(30),
				},
				true, true,
			)
			// Expected: grace (score 82.1, age 28)
			assertRowIDs(t, rowIDs, []int64{7})

			// Medium score (70-85) and older (>35)
			expr1 := &expression.SimpleExpression{
				Column:   "score",
				Operator: storage.GTE,
				Value:    float64(70.0),
			}
			expr2 := &expression.SimpleExpression{
				Column:   "score",
				Operator: storage.LTE,
				Value:    float64(85.0),
			}
			expr3 := &expression.SimpleExpression{
				Column:   "age",
				Operator: storage.GT,
				Value:    int64(35),
			}

			// Get score range using AND expression
			scoreRangeExpr := &expression.AndExpression{
				Expressions: []storage.Expression{expr1, expr2},
			}
			scoreRangeIDs := idx.GetFilteredRowIDs(scoreRangeExpr)

			// Get age range
			ageRangeIDs := idx.GetFilteredRowIDs(expr3)

			// Intersect results
			result := intersect(scoreRangeIDs, ageRangeIDs)

			// Expected: julia (score 79.4, age 38)
			assertRowIDs(t, result, []int64{10})
		})
	})

	// Test unique index behavior
	t.Run("UniqueIndex", func(t *testing.T) {
		// Create unique index on username
		idx := mvcc.NewMultiColumnarIndex(
			"idx_unique_username",
			"users",
			[]string{"username"},
			[]int{0},
			[]storage.DataType{storage.TEXT},
			vs,
			true, // isUnique = true
		)

		// Add users to index
		for i, user := range users {
			rowID := int64(i + 1)
			values := []storage.ColumnValue{
				storage.NewStringValue(user.Username),
			}
			err := idx.Add(values, rowID, 0)
			if err != nil {
				t.Fatalf("Failed to add user %d to index: %v", i+1, err)
			}
		}

		// Try to add duplicate username
		values := []storage.ColumnValue{
			storage.NewStringValue("alice"), // Already exists
		}
		err := idx.Add(values, 11, 0)
		if err == nil {
			t.Errorf("Expected uniqueness violation, but got no error")
		} else {
			// Verify it's a uniqueness constraint error
			if errMsg := err.Error(); !strings.Contains(errMsg, "unique") && !strings.Contains(errMsg, "constraint") {
				t.Errorf("Expected uniqueness constraint error, got: %v", err)
			}
		}

		// NULL values should not violate uniqueness
		values = []storage.ColumnValue{nil}
		err = idx.Add(values, 11, 0)
		if err != nil {
			t.Errorf("Adding NULL to unique index should not violate constraint: %v", err)
		}

		values = []storage.ColumnValue{nil}
		err = idx.Add(values, 12, 0)
		if err != nil {
			t.Errorf("Adding another NULL to unique index should not violate constraint: %v", err)
		}
	})

	// Test index build from version store
	t.Run("BuildFromVersionStore", func(t *testing.T) {
		// Create a new engine and table for this test
		newConfig := &storage.Config{
			Path: "", // Memory-only
		}
		newEngine := mvcc.NewMVCCEngine(newConfig)
		err := newEngine.Open()
		if err != nil {
			t.Fatalf("Failed to open engine: %v", err)
		}
		defer newEngine.Close()

		// Create a table
		schema := storage.Schema{
			TableName: "build_test",
			Columns: []storage.SchemaColumn{
				{ID: 0, Name: "id", Type: storage.INTEGER},
				{ID: 1, Name: "username", Type: storage.TEXT},
			},
		}
		_, err = newEngine.CreateTable(schema)
		if err != nil {
			t.Fatalf("Failed to create table: %v", err)
		}

		// Start a transaction to insert data
		tx, err := newEngine.BeginTx(nil)
		if err != nil {
			t.Fatalf("Failed to begin transaction: %v", err)
		}

		// Get the table
		table, err := tx.GetTable("build_test")
		if err != nil {
			t.Fatalf("Failed to get table: %v", err)
		}

		// Insert first 3 users
		for i := 0; i < 3; i++ {
			err = table.Insert(storage.Row{
				storage.NewIntegerValue(users[i].ID),
				storage.NewStringValue(users[i].Username),
			})
			if err != nil {
				t.Fatalf("Failed to insert user %d: %v", i+1, err)
			}
		}

		// Commit the transaction
		err = tx.Commit()
		if err != nil {
			t.Fatalf("Failed to commit transaction: %v", err)
		}

		// Get the version store
		newVS, vsErr := newEngine.GetVersionStore("build_test")
		if vsErr != nil {
			t.Fatalf("Failed to get version store: %v", vsErr)
		}

		// Create an index that should build from the version store
		idx := mvcc.NewMultiColumnarIndex(
			"idx_from_vs",
			"build_test",
			[]string{"id", "username"},
			[]int{0, 1},
			[]storage.DataType{storage.INTEGER, storage.TEXT},
			newVS,
			false,
		)

		// Build the index
		err = idx.Build()
		if err != nil {
			t.Fatalf("Failed to build index from version store: %v", err)
		}

		// Verify the index has the correct data
		// Look for users that were added to the version store
		rowIDs := idx.GetRowIDsEqual([]storage.ColumnValue{
			storage.NewIntegerValue(2),
			storage.NewStringValue("bob"),
		})
		assertRowIDs(t, rowIDs, []int64{2})

		// Make sure it doesn't have users that weren't added
		rowIDs = idx.GetRowIDsEqual([]storage.ColumnValue{
			storage.NewIntegerValue(4),
			storage.NewStringValue("dana"),
		})
		assertRowIDs(t, rowIDs, []int64{})
	})
}

// Helper functions

// parse parses a date string into a time.Time
func parse(dateStr string) time.Time {
	t, err := time.Parse("2006-01-02", dateStr)
	if err != nil {
		panic(fmt.Sprintf("Invalid date string: %s", dateStr))
	}
	return t
}

// assertRowIDs checks if the row IDs match the expected values
func assertRowIDs(t *testing.T, actual []int64, expected []int64) {
	t.Helper()

	if len(actual) != len(expected) {
		t.Errorf("Row ID count mismatch: got %d, want %d", len(actual), len(expected))
		t.Logf("Got: %v", actual)
		t.Logf("Want: %v", expected)
		return
	}

	// Convert to maps for easier comparison (ignoring order)
	actualMap := make(map[int64]bool)
	for _, id := range actual {
		actualMap[id] = true
	}

	for _, id := range expected {
		if !actualMap[id] {
			t.Errorf("Missing expected row ID: %d", id)
			t.Logf("Got: %v", actual)
			t.Logf("Want: %v", expected)
			return
		}
	}
}

// assertContainsRowIDs checks if actual contains all expected row IDs
func assertContainsRowIDs(t *testing.T, actual []int64, expected []int64) {
	t.Helper()

	// Convert to maps for easier lookup
	actualMap := make(map[int64]bool)
	for _, id := range actual {
		actualMap[id] = true
	}

	for _, id := range expected {
		if !actualMap[id] {
			t.Errorf("Missing expected row ID: %d", id)
			t.Logf("Got: %v", actual)
			t.Logf("Expected to contain: %v", expected)
			return
		}
	}
}

// containsChar checks if a string contains a specific character
func containsChar(s string, c rune) bool {
	for _, r := range s {
		if r == c {
			return true
		}
	}
	return false
}

// intersect returns the intersection of two int64 slices
func intersect(a, b []int64) []int64 {
	// Convert to maps for O(1) lookup
	aMap := make(map[int64]bool)
	for _, id := range a {
		aMap[id] = true
	}

	// Check each element in b against the map
	var result []int64
	for _, id := range b {
		if aMap[id] {
			result = append(result, id)
		}
	}

	return result
}
